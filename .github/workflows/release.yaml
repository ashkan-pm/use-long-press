name: Release
on:
  pull_request:
    branches:
      - master
    types:
      - closed
jobs:
  dependencies:
    name: Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: node-modules-cache-${{ hashFiles('./yarn.lock') }}
      # Install yarn dependencies
      - name: Install yarn dependencies
        run: yarn install
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      # Restore node_modules
      - name: Restore node_modules
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: node-modules-cache-${{ hashFiles('./yarn.lock') }}
      # Lint
      - name: Lint
        run: yarn lint
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      # Restore node_modules
      - name: Restore node_modules
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: node-modules-cache-${{ hashFiles('./yarn.lock') }}
      # Test
      - name: Test
        run: yarn test:cov
      # Upload coverage
      - name: Upload coverage
        run: yarn codecov --token=${{ secrets.CODECOV_TOKEN }}
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      # Restore node_modules
      - name: Restore node_modules
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: node-modules-cache-${{ hashFiles('./yarn.lock') }}
      # Build
      - name: Build
        run: yarn build
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [dependencies, lint, test, build]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      # Extract version from package.json
      - name: Extract version from package.json
        id: version
        run: >
          echo ::set-output name=tag::$(sed 's/.*"version": "\(.*\)".*/\1/;t;d' ./package.json)
      # Configure git
      - name: Set git name
        run: git config --global user.name "Ashkan Pourghasem"
      - name: Set git email
        run: git config --global user.email "ashkan.pourghasem@googlemail.com"
      # Create tag
      - name: Create tag
        run: git tag -a v${{ steps.version.outputs.tag }} -m "v${{ steps.version.outputs.tag }}"
      - name: Push tag
        run: git push origin v${{ steps.version.outputs.tag }}
      # Create GitHub release
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.tag }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
